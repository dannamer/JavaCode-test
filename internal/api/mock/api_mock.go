// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/dannamer/JavaCode-test/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// GetWalletBalance mocks base method.
func (m *MockWalletService) GetWalletBalance(ctx context.Context, UUID uuid.UUID) (model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", ctx, UUID)
	ret0, _ := ret[0].(model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockWalletServiceMockRecorder) GetWalletBalance(ctx, UUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockWalletService)(nil).GetWalletBalance), ctx, UUID)
}

// WalletTransaction mocks base method.
func (m *MockWalletService) WalletTransaction(ctx context.Context, transaction model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalletTransaction indicates an expected call of WalletTransaction.
func (mr *MockWalletServiceMockRecorder) WalletTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletTransaction", reflect.TypeOf((*MockWalletService)(nil).WalletTransaction), ctx, transaction)
}
